                                          
                                                             HTTP - HYPERTEXT TRANSFER PROTOCOL


=> HTTP is a client-server protocol: requests are sent by one entity, the user-agent 
=> Each individual request is sent to a server, which handles it and provides an answer, called the response. 
   Between the client and the server there are numerous entities, collectively called proxies, which perform different operations and act as gateways.


          COMPONENTS OF HTTP

=> HTTP is a client-server protocol: requests are sent by one entity, the "user-agent" (can be web browser).
=> Each individual request is sent to a server, which handles it and provides an answer, called the "response". 
   Between the client and the server there are numerous entities, collectively called "proxies", which perform different operations and act as gateways.
 
 * The Client - User Agent: The user-agent is any tool that acts on the behalf of the user. This role is primarily performed by the Web browser.
                            The browser is always the entity initiating the request.
                            To present a Web page, the browser sends an original request to fetch the HTML document that represents the page. 
                            It then parses this file, making additional requests corresponding to execution scripts, layout information (CSS) to display, and sub-resources contained within the page (usually images and videos).
                            The Web browser then mixes these resources to present to the user a complete document, the Web page.

 * The Web Browser  : which serves the document as requested by the client. 
                      it may actually be a collection of servers, sharing the load (load balancing) or a complex piece of software interrogating other computer like DBs.
                 
 * Proxies  : Between the Web browser and the server, numerous computers and machines relay the HTTP messages which are called proxies.
              These can be transparent, forwarding on the requests they receive without altering them in any way, or non-transparent.
              


          HTTP FLOW

=> Before a client and server can exchange an HTTP request/response pair, they must establish a TCP connection.
    The TCP connection is used to send a request, or several, and receive an answer. The client may open a new connection, reuse an existing connection, or open several TCP connections to the servers.
=> When we want to browse the web,the user types the URL.
   Ex: http://www.example.com/index.html

=> URL: it starts with "http". That's a signal to the browser that it needs to use HTTP to fetch the document for that URL.
=> The user mainly types the domain names.
   Ex: www.example.com

=> Those domain names map to IP addresses, the true location of the domain's computers. That's handled by the Domain Name System.
   The browser uses a DNS resolver to map the domain to an IP address.

=> Once the browser identifies the IP address of the computer hosting the requested URL, it sends an HTTP request.
   An HTTP request can be as short as two lines of text:

        GET /index.html HTTP/1.1
        Host: www.example.com

     * The first word is the HTTP verb: "GET". There are other verbs for other actions on the web, like submitting form data ("POST").
       It defines the operation the client wants to perform.
     * The next part specifies the path: "/index.html". The host computer stores the content of the entire website, so the browser needs to be specific about which page to load.
     * The final part of the first line specifies the protocol and the version of the protocol: "HTTP/1.1".
     * The second line specifies the domain of the requested URL.[Optional headers that convey additional information for the servers.]

=> Once the host computer receives the HTTP request, it sends back a response with both the content and metadata about it.
   The HTTP response can be as follows:

       HTTP/1.1 200 OK
       Content-Type: text/html; 
       charset=UTF-8
       Content-Length: 208

    * The response begins with the protocol and version, "HTTP/1.1".
    * It is followed by the HTTP STATUS CODE "200 OK" which represents a successful retrieval of the document.
    * Next is the Headers which gives the browser additional details and help the browser to render the content.
      The content-type tells the browser what type of document it's sending back.
      The content-length gives the length of the document in bytes, which helps the browser know how long a file will take to download.

=> Finally, the HTTP response writes out the actual document requested.
=> The browser now has all the information it needs to render the document requested.



         API BASED ON HTTP

=> The most commonly used API based on HTTP is the XMLHttpRequest API, which can be used to exchange data between a user agent and a server.
=> Using the EventSource interface, the client opens a connection and establishes event handlers.
   The client browser automatically converts the messages that arrive on the HTTP stream into appropriate Event objects, 
                 delivering them to the event handlers that have been registered for the events 'type'.










